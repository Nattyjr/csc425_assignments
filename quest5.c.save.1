Nate

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t pid;

    pid = fork();

    if (pid < 0) {
        // Forking error
        fprintf(stderr, "Fork failed\n");
        return 1;

    } else if (pid == 0) {
        // Child process

        printf("Child process executing\n");
        sleep(2);
        printf("Child process finished\n");

    } else {
        // Parent process
        int status;

        printf("Parent process waiting for child to finish\n");
        wait(&status);

        if ((status)) {
            // Child exited normally
            printf("Child process exited with status: %d\n", (status));

        } else if ((status)) {
            // Child terminated by signal
            printf("Child process terminated by signal: %d\n", (status));
        }

        printf("Parent process finished\n");
    }

    return 0
